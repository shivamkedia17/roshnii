openapi: "3.1.0"
info:
    title: "Roshnii API"
    version: "0.1.0" # Updated version
    description: "API for Roshnii - Photo storage and management service."
servers:
    - url: "http://localhost:8080/api" # Base path for API endpoints
      description: "Development server"
paths:
    /auth/google/login:
        get: # Changed to GET for redirect initiation
            summary: "Initiate Google OAuth Login"
            description: "Redirects the user to Google's OAuth consent screen."
            tags: ["Authentication"]
            responses:
                "307": # Temporary Redirect
                    description: "Redirecting to Google OAuth."
                "500":
                    description: "Internal Server Error (e.g., failed to generate state)"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
    /auth/google/callback:
        get: # Callback is a GET request from the browser after Google redirect
            summary: "Google OAuth Callback"
            description: "Handles the callback from Google after user authorization. Do not call directly. Sets auth cookie on success and redirects to frontend."
            tags: ["Authentication"]
            parameters:
                - name: code
                  in: query
                  required: true
                  description: "Authorization code provided by Google."
                  schema:
                      type: string
                - name: state
                  in: query
                  required: true
                  description: "State parameter for CSRF protection."
                  schema:
                      type: string
                - name: error
                  in: query
                  required: false
                  description: "Error code if authorization failed."
                  schema:
                      type: string
            responses:
                "307": # Temporary Redirect
                    description: "Successfully authenticated. Redirecting to frontend application."
                    headers:
                        Set-Cookie: # Indicate cookie is set (actual value is hidden)
                            schema:
                                type: string
                                example: auth_token=...; Path=/; HttpOnly; Secure; SameSite=Lax
                "400":
                    description: "Bad Request (e.g., missing code, state cookie)"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                "401":
                    description: "Unauthorized (e.g., invalid state, Google error)"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                "500":
                    description: "Internal Server Error (e.g., token exchange failed, DB error)"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
    /auth/google/logout:
        post:
            summary: "Logout User"
            description: "Logs out the currently authenticated user by clearing the auth cookie."
            tags: ["Authentication"]
            security:
                - cookieAuth: [] # Requires the auth_token cookie
            responses:
                "200":
                    description: "Successful logout"
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Successfully logged out"
                "401":
                    description: "Unauthorized (not logged in)"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                                /auth/google/refresh:
                                    post:
                                        summary: "Refresh Access Token"
                                        description: "Refreshes an expired access token using a valid refresh token."
                                        tags: ["Authentication"]
                                        responses:
                                            "200":
                                                description: "Token refreshed successfully"
                                                content:
                                                    application/json:
                                                        schema:
                                                            type: object
                                                            properties:
                                                                message:
                                                                    type: string
                                                                    example: "Token refreshed successfully"
                                                                token:
                                                                    type: string
                                                                    description: "New access token (only included in development mode)"
                                                headers:
                                                    Set-Cookie: # Indicate cookie is set (actual value is hidden)
                                                        schema:
                                                            type: string
                                                            example: auth_token=...; Path=/; HttpOnly; Secure; SameSite=Lax
                                            "401":
                                                description: "Unauthorized (invalid or expired refresh token)"
                                                content:
                                                    application/json:
                                                        schema:
                                                            $ref: "#/components/schemas/ErrorResponse"
                                            "500":
                                                description: "Internal Server Error"
                                                content:
                                                    application/json:
                                                        schema:
                                                            $ref: "#/components/schemas/ErrorResponse"

    /images:
        post:
            summary: "Upload Image"
            description: "Uploads a new image for the authenticated user."
            tags: ["Images"]
            security:
                - cookieAuth: [] # Requires auth
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                file:
                                    type: string
                                    format: binary
                                    description: "The image file to upload (JPEG, PNG, GIF, WEBP)."
                            required:
                                - file
            responses:
                "201":
                    description: "Image uploaded successfully"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ImageMetadata"
                "400":
                    description: "Bad Request (e.g., missing file, invalid type, size limit)"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                "401":
                    description: "Unauthorized"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                "500":
                    description: "Internal Server Error (e.g., storage failed, DB failed)"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
        get:
            summary: "List User Images"
            description: "Retrieves metadata for all images uploaded by the authenticated user."
            tags: ["Images"]
            security:
                - cookieAuth: [] # Requires auth
            responses:
                "200":
                    description: "List of image metadata"
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/ImageMetadata"
                "401":
                    description: "Unauthorized"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                "500":
                    description: "Internal Server Error"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"

    /me: # Example endpoint to get current user info
        get:
            summary: "Get Current User Info"
            description: "Retrieves basic information about the currently authenticated user."
            tags: ["User"]
            security:
                - cookieAuth: [] # Requires auth
            responses:
                "200":
                    description: "Current user information"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CurrentUser"
                "401":
                    description: "Unauthorized"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"

    /albums:
        post:
            summary: "Create Album"
            description: "Creates a new album for the authenticated user."
            tags: ["Albums"]
            security:
                - cookieAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: "The album name."
                                description:
                                    type: string
                                    description: "Optional album description."
                            required:
                                - name
            responses:
                "201":
                    description: "Album created successfully"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Album"
                "400":
                    description: "Bad Request"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                "401":
                    description: "Unauthorized"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                "500":
                    description: "Internal Server Error"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"

        get:
            summary: "List Albums"
            description: "Lists all albums for the authenticated user."
            tags: ["Albums"]
            security:
                - cookieAuth: []
            responses:
                "200":
                    description: "List of albums"
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Album"
                "401":
                    description: "Unauthorized"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                "500":
                    description: "Internal Server Error"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"

    /albums/{id}:
        get:
            summary: "Get Album"
            description: "Get a specific album by ID."
            tags: ["Albums"]
            security:
                - cookieAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: integer
                  description: "Album ID"
            responses:
                "200":
                    description: "Album details"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Album"
                "401":
                    description: "Unauthorized"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                "404":
                    description: "Album not found"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                "500":
                    description: "Internal Server Error"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"

        put:
            summary: "Update Album"
            description: "Update an existing album."
            tags: ["Albums"]
            security:
                - cookieAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: integer
                  description: "Album ID"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: "The album name."
                                description:
                                    type: string
                                    description: "Optional album description."
                            required:
                                - name
            responses:
                "200":
                    description: "Album updated successfully"
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                "400":
                    description: "Bad Request"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                "401":
                    description: "Unauthorized"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                "404":
                    description: "Album not found"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                "500":
                    description: "Internal Server Error"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"

        delete:
            summary: "Delete Album"
            description: "Delete an album and all its image associations."
            tags: ["Albums"]
            security:
                - cookieAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: integer
                  description: "Album ID"
            responses:
                "200":
                    description: "Album deleted successfully"
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                "401":
                    description: "Unauthorized"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                "404":
                    description: "Album not found"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                "500":
                    description: "Internal Server Error"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"

    /albums/{id}/images:
        post:
            summary: "Add Image to Album"
            description: "Add an image to an album."
            tags: ["Albums"]
            security:
                - cookieAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: integer
                  description: "Album ID"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                image_id:
                                    type: string
                                    format: uuid
                                    description: "ID of the image to add."
                            required:
                                - image_id
            responses:
                "200":
                    description: "Image added successfully"
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                "400":
                    description: "Bad Request"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                "401":
                    description: "Unauthorized"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                "404":
                    description: "Album or image not found"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                "500":
                    description: "Internal Server Error"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"

        get:
            summary: "List Images in Album"
            description: "List all images in an album."
            tags: ["Albums"]
            security:
                - cookieAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: integer
                  description: "Album ID"
            responses:
                "200":
                    description: "List of images in album"
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/ImageMetadata"
                "401":
                    description: "Unauthorized"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                "404":
                    description: "Album not found"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                "500":
                    description: "Internal Server Error"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"

/albums/{id}/images/{image_id}:
    delete:
        summary: "Remove Image from Album"
        description: "Remove an image from an album."
        tags: ["Albums"]
        security:
            - cookieAuth: []
        parameters:
            - name: id
              in: path
              required: true
              schema:
                  type: integer
              description: "Album ID"
            - name: image_id
              in: path
              required: true
              schema:
                  type: string
                  format: uuid
              description: "Image ID"
        responses:
            "200":
                description: "Image removed successfully"
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                message:
                                    type: string
            "401":
                description: "Unauthorized"
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ErrorResponse"
            "404":
                description: "Album or image not found"
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ErrorResponse"
            "500":
                description: "Internal Server Error"
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ErrorResponse"

components:
    schemas:
        ImageMetadata:
            type: object
            properties:
                id:
                    type: string
                    format: uuid
                    description: "Unique identifier for the image."
                user_id:
                    type: integer
                    format: int64
                    description: "ID of the user who uploaded the image."
                filename:
                    type: string
                    description: "Original filename of the uploaded image."
                content_type:
                    type: string
                    description: "MIME type of the image (e.g., 'image/jpeg')."
                size:
                    type: integer
                    format: int64
                    description: "Size of the image in bytes."
                width:
                    type: integer
                    description: "Width of the image in pixels (if available)."
                height:
                    type: integer
                    description: "Height of the image in pixels (if available)."
                created_at:
                    type: string
                    format: date-time
                    description: "Timestamp when the image metadata was created."
                updated_at:
                    type: string
                    format: date-time
                    description: "Timestamp when the image metadata was last updated."
            required:
                - id
                - user_id
                - filename
                - content_type
                - size
                - created_at
                - updated_at

        CurrentUser: # Example schema for the /me endpoint
            type: object
            properties:
                user_id:
                    type: integer
                    format: int64
                email:
                    type: string
                    format: email
                # Add other relevant fields (name, picture_url) if fetched/available
            required:
                - user_id
                - email

        ErrorResponse:
            type: object
            properties:
                error:
                    type: string
                    description: "A description of the error."
            required:
                - error

        Album:
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                    description: "Unique identifier for the album."
                user_id:
                    type: integer
                    format: int64
                    description: "ID of the user who created the album."
                name:
                    type: string
                    description: "Name of the album."
                description:
                    type: string
                    description: "Description of the album (optional)."
                created_at:
                    type: string
                    format: date-time
                    description: "Timestamp when the album was created."
                updated_at:
                    type: string
                    format: date-time
                    description: "Timestamp when the album was last updated."
            required:
                - id
                - user_id
                - name
                - created_at
                - updated_at

    securitySchemes:
        cookieAuth: # Define cookie-based authentication
            type: apiKey
            in: cookie
            name: auth_token # Name of the cookie
