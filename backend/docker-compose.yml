services:
  # Development Database Service
  db:
    image: postgres:15-alpine
    container_name: roshnii-postgres-dev
    environment:
      POSTGRES_USER: ${POSTGRES_USER} # Read from .env file
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432" # Map host 5432 to container 5432 for dev access
    volumes:
      - ./db:/docker-entrypoint-initdb.d # Initialize schema on first start
      - postgres_dev_data:/var/lib/postgresql/data # Persist dev data
    healthcheck:
        test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
        interval: 5s
        timeout: 5s
        retries: 5
    networks:
      - dev_network 

  # Backend Application Service (Development Mode)
  backend:
    build:
      context: . 
      dockerfile: Dockerfile
    container_name: roshnii-backend-dev
    depends_on:
      db:
        condition: service_healthy # Wait for DB to be ready based on healthcheck
    ports:
      - "8080:8080" # Map host 8080 to container 8080
    environment:
      ENVIRONMENT: development # Set development mode
      POSTGRES_URL: ${POSTGRES_URL} # Use the dev DB URL
      SERVER_HOST: 0.0.0.0 # Listen on all interfaces inside container
      SERVER_PORT: 8080
      JWT_SECRET: ${JWT_SECRET}
      TOKEN_DURATION: ${TOKEN_DURATION}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      FRONTEND_URL: ${FRONTEND_URL}
      # Add other config vars as needed (e.g., storage path if not default)
      # LOCAL_STORAGE_PATH: /app/uploads # Example if needed
    networks:
      - dev_network 

# Define the network
networks:
  dev_network: 
    driver: bridge

# Define the named volume for persistent dev data
volumes:
  postgres_dev_data:
